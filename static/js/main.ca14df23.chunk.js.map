{"version":3,"sources":["component/My-Task-List/My-Task-List.js","App.js","serviceWorker.js","index.js"],"names":["MyTaskList","props","componentDidMount","getTasks","onChange","event","setState","target","name","value","onSubmit","state","task","tasklist","JSON","parse","localStorage","getItem","status","push","setItem","stringify","sort","a","b","map","item","index","color","cardBackground","background","taskComplete","textDecoration","Card","key","fluid","style","Content","Header","textAlign","wordWrap","Meta","Icon","link","onClick","updateTask","paddingRight","undoTask","deleteTask","splice","as","className","Form","this","Input","type","placeholder","Group","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca14df23.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\r\nimport \"./my-task-list.css\";\r\n\r\nclass MyTaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          task: \"\",\r\n          tasklist: []\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.getTasks()\r\n    }\r\n\r\n    onChange = event => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = () => {\r\n        if(this.state.task) {\r\n            let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"))\r\n\r\n            if(tasklist == null) tasklist = []\r\n\r\n            let task = {\r\n                task: `? ${this.state.task}`,\r\n                status: false\r\n            }\r\n\r\n            tasklist.push(task)\r\n            localStorage.setItem(\"tasklist\", JSON.stringify(tasklist))\r\n\r\n            this.setState({ task: \"\"})\r\n\r\n            this.getTasks()\r\n        }\r\n    }\r\n\r\n    getTasks = () => {\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"))\r\n        if(tasklist) {\r\n            tasklist = tasklist.sort((a, b) => {\r\n                if(a.status) return 1\r\n                else if (b.status) return -1\r\n                else return 0\r\n            })\r\n\r\n            localStorage.setItem(\"tasklist\", JSON.stringify(tasklist))\r\n\r\n            this.setState({\r\n                // default color\r\n                // Incomplete: yellow\r\n                // complete: green\r\n                tasklist: tasklist.map((item, index) => {\r\n                  let color = \"yellow\";\r\n                  let cardBackground = { background: \"white\" };\r\n                  let taskComplete = { textDecoration: \"none\" };\r\n        \r\n                  if (item.status) {\r\n                    color = \"green\";\r\n                    cardBackground.background = \"beige\";\r\n                    taskComplete[\"textDecoration\"] = \"line-through\";\r\n                  }\r\n                  return (\r\n                    <Card key={index} color={color} fluid style={cardBackground}>\r\n                      <Card.Content>\r\n                        <Card.Header textAlign=\"left\" style={taskComplete}>\r\n                          <div style={{ wordWrap: \"break-word\" }}>{item.task}</div>\r\n                        </Card.Header>\r\n        \r\n                        <Card.Meta textAlign=\"right\">\r\n                          <Icon\r\n                            link\r\n                            name=\"check circle\"\r\n                            color=\"green\"\r\n                            onClick={() => this.updateTask(index)}\r\n                          />\r\n                          <span style={{ paddingRight: 10 }}>Done</span>\r\n                          <Icon\r\n                            link\r\n                            name=\"undo\"\r\n                            color=\"yellow\"\r\n                            onClick={() => this.undoTask(index)}\r\n                          />\r\n                          <span style={{ paddingRight: 10 }}>Undo</span>\r\n                          <Icon\r\n                            link\r\n                            name=\"delete\"\r\n                            color=\"red\"\r\n                            onClick={() => this.deleteTask(index)}\r\n                          />\r\n                          <span style={{ paddingRight: 10 }}>Delete</span>\r\n                        </Card.Meta>\r\n                      </Card.Content>\r\n                    </Card>\r\n                  );\r\n                })\r\n              });\r\n        }\r\n    }\r\n\r\n    updateTask = index => {\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"))\r\n        tasklist[index].status = true\r\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist))\r\n        this.getTasks()\r\n    }\r\n\r\n    undoTask = index => {\r\n        // get the task list from the local storage\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n        // change status to false\r\n        tasklist[index].status = false;\r\n        // save the updated task list\r\n        localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n        // refresh the task list\r\n        this.getTasks();\r\n      };\r\n\r\n    deleteTask = index => {\r\n        let tasklist = JSON.parse(localStorage.getItem(\"tasklist\"));\r\n    // remove the task from the task list\r\n    tasklist.splice(index, 1);\r\n    // save the updated task list\r\n    localStorage.setItem(\"tasklist\", JSON.stringify(tasklist));\r\n    // refresh the task list\r\n    this.getTasks();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <div>\r\n              <Header as=\"h1\">\r\n                <div className=\"app-header\">? My Task List</div>{\" \"}\r\n              </Header>\r\n            </div>\r\n            <div className=\"app-form\">\r\n              <Form onSubmit={this.onSubmit}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"task\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.task}\r\n                  fluid\r\n                  placeholder=\"task...\"\r\n                />\r\n              </Form>\r\n            </div>\r\n            <div>\r\n              <Card.Group>{this.state.tasklist}</Card.Group>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default MyTaskList;     ","import React from \"react\";\nimport \"./App.css\";\nimport MyTaskList from \"./component/My-Task-List/My-Task-List\"\n\nfunction App() {\n  return (\n    <div>\n      <MyTaskList></MyTaskList>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}